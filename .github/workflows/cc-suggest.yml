name: suggest-conventional-commit

on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  suggest:
    if: github.base_ref == 'develop'
    runs-on: ubuntu-latest
    steps:
      - name: Suggest Conventional Commit title
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const number = pr.number;
            const title = pr.title || '';
            const ccRe = /^(feat|fix|docs|chore|refactor|test|ci|build|perf|revert)(\([^)]+\))?!?:\s.+/;
            if (ccRe.test(title)) {
              core.info('Title already conforms to Conventional Commits.');
              return;
            }
            const files = await github.paginate(github.rest.pulls.listFiles, {owner, repo, pull_number: number});
            const names = files.map(f => f.filename);
            let type = 'chore';
            if (names.length && names.every(n => n.startsWith('docs/'))) type = 'docs';
            else if (names.length && names.every(n => n.startsWith('tests/') || n.includes('/tests/'))) type = 'test';
            else if (names.some(n => n.startsWith('.github/'))) type = 'ci';
            else if (names.some(n => n.endsWith('pyproject.toml'))) type = 'build';
            else if (names.some(n => n.startsWith('src/'))) type = 'feat';
            let scope = 'repo';
            const src = names.find(n => n.startsWith('src/'));
            if (src) {
              const m = src.match(/^src\/(?:mcp_devhatchery|[^/]+)\/([^/]+)/);
              if (m && m[1]) scope = m[1].replace(/\..*$/, '');
            } else if (names.some(n => n.startsWith('docs/'))) {
              scope = 'docs';
            }
            const base = title.replace(/^(feat|fix|docs|chore|refactor|test|ci|build|perf|revert)(\([^)]+\))?!?:\s*/,'').trim();
            const summary = base || 'short imperative summary';
            const suggestion = `${type}(${scope}): ${summary}`;
            const body = [
              'ðŸ¤– Suggested Conventional Commit title for **squash merge**:',
              '',
              '```',
              suggestion,
              '```',
              '',
              'Squash merges use the PR title as the commit message. Edit the PR title to apply.'
            ].join('\n');
            const comments = await github.paginate(github.rest.issues.listComments, {owner, repo, issue_number: number});
            const exists = comments.some(c => (c.user && /bot/i.test(c.user.type)) && /Suggested Conventional Commit/.test(c.body || ''));
            if (!exists) {
              await github.rest.issues.createComment({owner, repo, issue_number: number, body});
            }
